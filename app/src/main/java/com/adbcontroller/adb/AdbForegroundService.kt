package com.adbcontroller.adb

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.IBinder
import android.util.Log
import com.adbcontroller.gps.GpsSpoofer
import com.adbcontroller.permissions.PermissionManager
import com.adbcontroller.sms.SmsSender

class AdbForegroundService: Service() {

    override fun onCreate() {
        super.onCreate()
        startForeground(1, createNotification())
        Log.i("AdbService", "‚úÖ ForegroundService –∑–∞–ø—É—â–µ–Ω")
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.w("AdbService", "üöÄ ForegroundService —É–∂–µ –∂–∏–≤ –∏ –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É!")
        Log.i("AdbService", "üì© Service –ø–æ–ª—É—á–∏–ª intent: $intent")

        if (intent?.action == "com.adbcontroller.ADB_COMMAND") {
            handleCommand(intent)
        } else {
            Log.w("AdbService", "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${intent?.action}")
        }

        return START_STICKY
    }

    private fun handleCommand(intent: Intent) {
        val command = intent.getStringExtra("command")
        Log.i("AdbService", "‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: $command")

        when (command) {
            "send_sms" -> {
                val phone = intent.getStringExtra("phone")
                val text = intent.getStringExtra("text")
                if (phone != null && text != null) {
                    Log.w("AdbService", "üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS: $phone -> $text")
                    SmsSender(this).sendSms(phone, text)
                } else {
                    Log.e("AdbService", "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç")
                }
            }

            "start_gps" -> {
                val lat = intent.getDoubleExtra("lat", 0.0)
                val lon = intent.getDoubleExtra("lon", 0.0)
                Log.w("AdbService", "üì° –°—Ç–∞—Ä—Ç GPS —Å–ø—É—Ñ–∏–Ω–≥–∞: $lat, $lon")
                GpsSpoofer(this).startMockLocation(lat, lon)
            }

            "stop_gps" -> {
                Log.w("AdbService", "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ GPS —Å–ø—É—Ñ–∏–Ω–≥–∞")
                GpsSpoofer(this).stopMockLocation()
            }

            "request_permissions" -> {
                Log.w("AdbService", "üîë –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                PermissionManager(this).requestAllPermissions()
            }

            "set_default_sms" -> {
                Log.w("AdbService", "üì± –î–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SMS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                PermissionManager(this).setDefaultSmsApp()
            }

            "restore_default_sms" -> {
                Log.w("AdbService", "üì± –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SMS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                PermissionManager(this).restoreDefaultSmsApp()
            }

            "restore_gps" -> {
                Log.w("AdbService", "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é GPS –ª–æ–∫–∞—Ü–∏—é")
                GpsSpoofer(this).restoreLastLocation()
            }

            else -> {
                Log.e("AdbService", "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command")
            }
        }
    }

    private fun createNotification(): Notification {
        val channelId = "adb_service_channel"
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                channelId,
                "ADB Foreground Service",
                NotificationManager.IMPORTANCE_LOW
            )
            getSystemService(NotificationManager::class.java)
                .createNotificationChannel(channel)
        }

        return Notification.Builder(this, channelId)
            .setContentTitle("ADB Controller")
            .setContentText("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç ADB –∫–æ–º–∞–Ω–¥")
            .setSmallIcon(android.R.drawable.ic_menu_manage)
            .setOngoing(true)
            .build()
    }

    override fun onBind(intent: Intent?): IBinder? = null
}